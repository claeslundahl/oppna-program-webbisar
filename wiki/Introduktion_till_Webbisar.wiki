#summary Introduktion till projektet webbisar.
#labels Featured

= Innehåll =
<wiki:toc/> 

= Introduktion =

Webbisar är en webbapplikation som har som huvudsyfte att lagra och visa bilder/film på nyfödda bäbisar, sk "webbisar". Genom att logga in i portalen (i VGRs fall med e-id) kan nyblivna föräldrar själva lägga upp och administrera mediafiler på sina nyfödda. Webbapplikationen visar sedan upp webbisarna. 

Det finns även en "widget" som kan användas på andra webbsidor för att länka till webbisar-applikationen. 

= Systemöversikt =

Webbisar består av två huvudkomponenter, en webapplikation som exekverar i en web-container, i dagsläget Apache Tomcat och en portlet webbapplikation med två portlets som exekverar i en JSR 286-kompatibel portal, t ex i IBM Websphere Portal. Förutom dessa två komponenter finns det även en mediaservlet som servar mediafiler. I dagsläget görs detta från Apache Tomcat (se nedan för konfiguration) men mediafilerna skulle även kunna ligga någon annanstans. 

Webbapplikationen innefattar funktionalitet för att söka efter och visa upp webbisar samt för att spara och uppdatera webbisar. Det är dock portlet-komponenten som implementerar gränssnittet för att lägga till och uppdatera webbisar. Detta för att användaren ska tvingas logga in (vi utnyttjar portalens inloggning mha e-id) innan han/hon lägger upp sina webbisar. Portlet-komponenterna kommunicerar med webapplikationen via HTTP (på URL:en `http://<host>/webbisar/remoting`) och FTP. HTTP används för att göra remote-anrop via Spring Remoting och FTP används för att överföra mediafiler. Dessa gränssnitt är ej åtkomliga utifrån utan nås bara från portalen.

Två diskareor används lokalt på Apache Tomcat servern. En för att lagra mediafiler och en för att lagra ett Lucene-index som används i sökningar. 

http://oppna-program-webbisar.googlecode.com/svn/wiki/bilder/systemoversikt.png

= Webbapplikationen - för att visa webbisar =
Web-applikationen är skriven enligt [http://code.google.com/p/oppna-program/wiki/Introduktion_till_RA Öppna programs referensarkitektur] och är därför baserad på [http://www.springsource.org/webflow Spring Webflow version 2] och [http://java.sun.com/javaee/javaserverfaces/ JSF]/[https://facelets.dev.java.net/ Facelets]. Detta gör att applikationen har tillstånd kopplat till en användares session och användaren befinner sig alltid i ett flöde. Det finns två ingångar till flödet:

  # `http://<host>/webbisar/`
  # `http://<host>/webbisar/?webbisId=<id>`

Den första URL:en gör att man hamnar på förstasidan och den andra att man hamnar direkt på en webbis med det angivna id:et.

== Integration med !EpiServer ==
Hos VGR är webbapplikationen integrerad i !EpiServer. Bilden nedan visar hur Webbisar integrerar med !EpiServer. På sidan i !EpiServer finns en iframe för webbisar-applikationen (innanför den röda ramen). Denna iframe pekar på urlen till webbisar (ex `http://webbisar.vgregion.se/webbisar`). Den kan även hantera vidarebefordran av parametrar från den yttre sidan till iframe i det fallet att man länkar direkt till en webbis. 

http://oppna-program-webbisar.googlecode.com/svn/wiki/bilder/integration_med_episerver.png
 
=== P3P === 
För att kunna köra i en iframe i Internet Explorer 6 och 7 så krävs att man annonserar att man inte gör vissa saker med cookies som skulle kunna inkräkta på användarens integritet. Eftersom vi inte använder användarens identitet i Webbisar-applikationen så har vi ett servlet filter som lägger på en P3P header i varje response. Denna header gör att Internet Explorer 6 och 7 kan sätta cookien i iframe:en.


== Felhantering ==

Om något går fel i applikationen så görs en redirect till en servlet (`<host>/webbisar/internalerror/*`). Denna redirect görs dels från getlink.xhtml och dels från error.xhtml. Servleten som hanterar requests för internalerror försöker göra redirect till första sidan och räknar i användarsessionen upp det antal fel som inträffar inom 10 sekunder. Om det antalet överstiger tre, så görs redirect till en felsida som meddelar att applikationen har ett internt fel.

Anledningen till detta upplägg är att man får ett fel då en användarsession och därmed ett flöde råkar ut för en timeout. Detta måste hanteras på något sätt. Nuvarande lösning är inte optimal men fungerar. 


== Loggning == 

Applikationen har en eventlog som hittas under Apache Tomcats installations-katalog under `logs`. Filen heter `tracelog.log`. I den kan man se när användare skapat, uppdaterat samt tagit bort webbisar. Övrig loggning sker i `webbisar.log`.

== Tredjepartsramverk ==
Applikationen använder sig av JPA och Hibernate för databas-persistens. Dessutom används Hibernate Search och Hibernate Validator. Den förstnämnda är ett ramverk för att indexera och tillåta sökningar på databasentiteter via ett Lucene-index. Hibernate Search integrerar med Hibernate. Hibernate Validator används för datavalidering.

= Servning av mediafiler =

Som en temporär lösning lagras mediafiler direkt på den lokala disken på Apache Tomcat-maskinen (t ex under `C:/webbisar/mediafiles`). För att dessa mediafiler ska kunna kommas åt via http behöver följande konfiguration göras i Tomcat: 

Under .../tomcat/conf/Catalina/localhost/ eller .../tomcat/conf, beroende på Tomcat-version, finns filen mediafiles.xml med innehållet

{{{
<?xml version='1.0' encoding='utf-8'?>
<Context path = "/media" docBase="C:/webbisar/mediafiles">
</Context>
}}}

Denna konfiguration innebär att det går att komma åt mediafiler i den lokala katalogen `C:/webbisar/mediafiles` och dess underkataloger via Tomcat-servern: `http://<host>/media/`. 

= Portlets - för att editera webbisar = 
Applikationen har två portlets, en som används för att lägga till och uppdatera webbisar och en admin-portlet, som används av administratörer för att inaktivera webbisar (om någon lagt upp något olämpligt innehåll) samt för att uppdatera lucene-indexet. 

Portletarna är i största möjliga mån uppbyggda enligt [http://code.google.com/p/oppna-program/wiki/Introduktion_till_RA referensarkitekturen]. De följer t ex referensarkitekturen när det gäller katalogstruktur och att maven2 används för bygge etc. Portletarna använder sig däremot inte av den teknikstack som referensarkitekturen förespråkar då vissa av dessa ramverk (främst JSF och facelets) inte har visat sig fungera ihop med nuvarande version av Websphere Portal. Istället är portletarna implementerade mha av standarden JSR 286, utan några specifika webb-ramverk som hjälp. 

All konfiguration som behövs i portlettarna hämtas från web-applikationen via Spring remoting. Den enda konfig som behövs i portlet-projektet är alltså urlen till webprojektets Spring remoting-interface. Se avsnittet [http://code.google.com/p/oppna-program-webbisar/wiki/Introduktion_till_Webbisar#Konfiguration konfiguration] nedan.

== !EditWebbis Portlet ==
!EditWebbis portleten används av slutanvändarna för att lägga till, uppdatera och ta bort webbisar. Portleten skall endast vara tillgänglig då man har loggat in i portalen med hjälp av e-id. Korrekta rättigheter konfigureras i portalen, portleten i sig förutätter att användaren är inloggad. 

== !AdminEditWebbis Portlet ==
!AdminEditWebbis portleten är endast tillgänglig för administratörer (konfigureras i portalen, själva portleten förutsätter att användaren är inloggad). Den används för att inaktivera/aktivera webbisar (inaktiva webbisar - innebär att de inte längre syns i sökningar och menyer) samt uppdatera lucene-indexet.

= Widget =

Webbapplikationen har förberett stöd för sk widgets, som möjliggör att man kan visa delar av webbisar-innehållet på sin egen webbsida och samtidigt länka till webbisar. Det finns ett exempel som följer med webbapplikationen i `widget-example.html`. Deployas per default på: 

`http://<host>/webbisar/widget-example.html`

Exemplet använder sig av en css-fil och en !JavaScript-fil

`/style/widget.css`
`/scripts/widget.js`

Widget:en, som kommunicerar med webbapplikationen, baserar sig på _JSON (!JavaScript Object Notation) with padding_. Det är en mekanism som möjliggör att en webbläsare kan hämta information från en annan domän utan att säkerhetsmodellen i webbläsaren blockerar det. Principen är att man istället för att skicka tillbaka ett !JavaScript objekt i JSON-format från servern, så kapslar man in objektet i ett metodanrop:

`{”message”, ”hello”}`

Blir således:

`callback({ ”message”, ”hello”})`

Sidan som tar emot anropet skapar dynamiskt en skript-tag och lägger i head-elementet på sidan. Skript-taggen pekar med src-attributet mot servern som har informationen. Skriptelementet evalueras och i detta fallet så sker ett anrop till en funktion som heter callback på sidan. Om sidan har definierat en sådan funktion, så kommer den att anropas med !JavaScript objektet och man kan använda det för att dynamiskt förändra sidan.

Genom att titta på exemplet, ffa widget.js, så kan man förstå hur man kan använda mekanismen för att bygga widgets på sina egna sidor.

Notera att sökvägar till widget.js samt json-controller är hårdkodade i skript/html.

= Databas = 
Databasen består av tre tabeller. En för webbisen, en som innehåller namn på föräldrar (!WebbisParent) och en som innehåller mediainformation (!WebbisMediaFile). Webbis_id i sub-tabellerna kopplar till id i Webbis tabellen.

http://oppna-program-webbisar.googlecode.com/svn/wiki/bilder/db_tabeller.png

En webbis kan även vara kopplad till en annan webbis via multiple_birth_main_webbis_id, detta sker då tvillingar/trillingar läggs upp. 

Det är webb-applikationen som har kontakt med databasen, se systemöversiktsbilden ovan. 


= Konfiguration = 

Konfiguration görs via ett antal konfigfiler. Dessa återfinns under `src/main/resources` i respektive projekt (not: Under src/test/resources finns konfigurationsfiler som används vid enhetstester - dessa inställningar bör dock fungera utan ändringar. Se t ex projektet core-bc/composites/svc). Här följer en uppställning kring de viktigaste konfigurationerna man kan göra i respektive projekt och fil: 

|| *Projekt* || *Konfigurations-fil* || *Inställning/property* || *Förklaring* ||
||core-bc/modules/portlet, core-bc/modules/web samt tools/data-generator||services-config.xml (applicationContext-hibernate.xml för tools/data-generator)||`<context:property-placeholder location="classpath:application-prod.properties"/>`||Här kan man peka ut endera application-prod.properties eller application-dev.properties. Sedan är det inställningarna i utpekad fil som gäller i projektet. Not: "Prod" används även för test/utvecklingsmiljön i dagsläget. Framöver kan det ev behövas fler filer. ||
||core-bc/modules/portlet||application-dev.properties resp. application-prod.properties||`webbapp.remoting.url`||Här anger man urlen till Spring remoting-interfacet i webbappen. I dev-filen anger man sin lokala url och i prod-filen urlen till produktionsmiljön (i dagsläget test/utvecklingsmiljön). När portletten deployas efterfrågar den all sin konfiguration genom ett anrop till webappen på denna url. Därav att den enda konfigurationen som portletten behöver är urlen till webappens remoting-interface samt att viss konfig som används i portletten ligger i web-projektets konfig-filer (t ex FTP-konfigurationen). ||
||core-bc/modules/web samt tools/data-generator||hibernate.cfg.xml||`hibernate.search.default.indexBase`||Pekar ut var lucene-indexet ska ligga, t ex `C:/webbisar/lucene/indexes`. Vid lokal utveckling kan man behöva ändra denna inställning, om man inte kör på samma struktur som på utv/test-servern. ||
||core-bc/modules/web samt tools/data-generator||application-dev.properties resp application-prod.properties|| `jdbc.url` samt `hibernate.connection.url` || Båda dessa ska ang JDBC-urlen till databasen. I den lokala utvecklingsmiljön har vi använt en lokal HSQL DB.||
||core-bc/modules/web samt tools/data-generator||application-dev.properties resp application-prod.properties|| `jdbc.username` samt `hibernate.connection.username` || Båda dessa sätts till användarnamnet i db.||
||core-bc/modules/web samt tools/data-generator||application-dev.properties resp application-prod.properties|| `jdbc.password` samt `hibernate.connection.password` || Båda sätts till db-lösenordet.||
||core-bc/modules/web samt tools/data-generator||application-dev.properties resp application-prod.properties|| `webbisar.imageBaseDir` || Katalog på disk där bilderna ska sparas.||
||core-bc/modules/web samt tools/data-generator||application-dev.properties resp application-prod.properties|| `webbisar.imageBaseUrl` || URL där bilderna kan accessas via http (se [http://code.google.com/p/oppna-program-webbisar/wiki/Introduktion_till_Webbisar#Servning_av_bilder ovan]).||
||core-bc/modules/web samt tools/data-generator||application-dev.properties resp application-prod.properties|| `webbisar.ftpConfiguration` || URL till ftp-gränssnittet inkl användarnamn och lösen. Not: Detta används ifrån portletten men anges här eftersom portletten efterfrågar all sin konfiguration från webappen. ||
||core-bc/modules/web samt samt tools/data-generator||application-dev.properties resp application-prod.properties|| `webbisar.imageSize` || Storlek på bilderna när de sparas på disk (de skalas ner till denna storlek).||
||core-bc/modules/web samt samt tools/datagenerator||application-dev.properties resp application-prod.properties|| `webbisar.imageQuality` || Kvalitet på bilderna när de sparas på disk - 0 är lägst och 100 är högst.||
||core-bc/composites/svc||users.properties|| - || Filen innehåller alla inställningar för respektive ftp-användare (denna fil pekas ut i den generella ftp-server-konfigen i services-config.xml). ||
||core-bc/composites/svc||users.properties|| `ftpserver.user.<ftp-username>.userpassword` || MD5 krypterat lösenord till ftp-användaren med användarnamn `<ftp-username>`. Ska matcha inställningen i `webbisar.ftpConfiguration` ovan. Se http://www.iwebtool.com/md5 för hur man krypterar lösenordet. ||
||core-bc/composite/svc||users.properties|| `ftpserver.user.<ftp-username>.homedirectory` || I denna katalog lagras bilderna som ftp:as upp med denna användare. Ska alltså matcha inställningen i `webbisar.imageBaseDir` ovan. ||

Se respektive konfigurationsfil samt källkoden för övrig konfig. 

= Sätta upp sin lokala utvecklingsmiljö =

För att utveckla och köra projektet lokalt används referensarkitekturens utvecklingsmiljö. Börja därför med att sätta upp utvecklingsmiljön enligt [http://code.google.com/p/oppna-program/wiki/Anvisningar_Utvecklingsmiljo referensarkitekturens instruktioner]. Se [http://code.google.com/p/oppna-program-webbisar/source/checkout Source] för information om hur du checkar ut källkoden. 

För att köra webbisars webbapplikation och portlet lokalt behövs några ytterligare inställningar. 

== Ladda hem och installera en lokal databas ==
Databasen HSQL DB används lokalt för utveckling och test. I enhetstesterna körs den embedded och laddas hem (mha maven) och dras igång automatiskt. 

Då man kör webbappen i en lokal Tomcat så behöver man dra igång databasen som en separat process. 

Ladda hem och packa upp HSQL DB 1.8.0 från http://hsqldb.org/. Skapa en env-variabel `HSQLDB_HOME` som pekar på din installation. 

Skapa sedan en katalog där du vill ha databasen. Starta databasen i den katalogen med följande kommando:
{{{
java -cp $HSQLDB_HOME/lib/hsqldb.jar org.hsqldb.Server -database.0 file:webbisardb -dbname.0 webbisardb
}}}

Not: Vid behov av att titta på vad som finns i databasen kan följande kommando användas för att starta HSQL DBs admingränssnitt (en swing-applikation som följer med HSQL DB): 
{{{
java -cp $HSQLDB_HOME/lib/hsqldb.jar org.hsqldb.util.DatabaseManagerSwing
}}}

De db-inställningar som återfinns i application-dev.properties (jdbc-url, användarnamn och lösenord) bör fungera utan ändring. 

Fullständig dokumentation över HSQL DB finns [http://hsqldb.sourceforge.net/web/hsqlDocsFrame.html här].

== Skapa en lokal katalog för lucene-indexet ==

Skapa en katalog där du vill att lucene-indexet skall ligga. Peka ut denna katalog i hibernate.cfg.xml-filen, propertyn heter `hibernate.search.default.indexBase`, under src/main/resources i projekten core-bc/modules/web samt tools/data-generator. 

== Skapa en lokal katalog för mediafiler ==

Skapa en katalog där mediafiler kan sparas lokalt. Peka ut denna katalog ifrån projektet core-bc/composite/svc -> filen users.properties -> propertyn `ftpserver.user.testuser.homedirectory` samt 
projekten core-bc/modules/web och tools/data-generator -> filen application-dev.properties -> propertyn `webbisar.imageBaseDir`. 

== Konfigurera din lokala Tomcat att serva mediafiler ==
Följ instruktionerna [http://code.google.com/p/oppna-program-webbisar/wiki/Introduktion_till_Webbisar#Servning_av_bilder ovan] för att låta Tomcat serva mediafiler från disk via http. 

Peka ut URLen i projekten core-bc/modules/web samt tools/data-generator -> filen application-dev.properties -> propertyn `webbisar.imageBaseUrl`.

== Populera den lokala databasen och lucene-indexet med testdata ==

Utan en enda webbis i databasen/indexet kommer webbapplikationen att skicka användaren till felsidan. Endera lägger man upp testdata mha det medföljande skript (en vanlig Java-klass) som finns för detta syfte eller så lägger man manuellt upp en eller flera webbisar via portletten (se nästa steg). Observera att testdataskriptet lägger upp _mycket_ testdata och därför tar relativt lång tid att köra: 

  * Kör tools/data-generator -> !WebbisGenerator.java (OBS tar lång tid! Kontrollera loggen efter "Closing JPA !EntityManagerFactory for persistence unit 'dbschema'", detta indikerar att skriptet är klart.)
  * Kör därefter tools/data-generator -> !WebbisIndexer.java för att indexera om - även detta tar lång tid. 

Testskriptet skapar webbisar som länkar till ett antal [http://oppna-program-webbisar.googlecode.com/svn/trunk/tools/data-generator/test-images/images.zip testbilder] som behöver läggas upp manuellt. Testbilderna (som heter 0-10.jpg) finns zippade under tools/data-generator/test-images. Packa upp [http://oppna-program-webbisar.googlecode.com/svn/trunk/tools/data-generator/test-images/images.zip testbilderna] i roten på din lokala katalog för mediafilerna.

Vill man inte köra skriptet för att fylla databasen med testdata kan man alltså lägga till webbisar via portletten. 

== Testa portlets/webapp lokalt ==

Projektet byggs och deployas som de flesta andra projekt på Öppna program, bygg med maven och deploya via VGR's bundlade Eclipse på en lokal instans av Liferay.

= Deployment / Release = 

För att bygga till utv-miljö/test/produktion behöver man se till att rätt properties är satta i respektive projekt. Se avsnittet [http://code.google.com/p/oppna-program-webbisar/wiki/Introduktion_till_Webbisar#Konfiguration konfiguration] ovan för information om vilka properties som behöver sättas. application-xyz.properties skall pekas ut i web och portlet-modulerna samt att Lucene-indexet ska pekas ut rätt i hibernate.cfg.xml. Dessutom måste rätt properties vara tillgängliga i security.properties.

Ett tillägg till mavenbygget är att det finns ytterligare en profil att ta hänsyn till. Om portletarna skall deployas på WebSphere måste profilen 'wsp' användas. Annars byggs/releasas projektet som vanligt enligt [http://code.google.com/p/oppna-program/wiki/Bygganvisningar_Oppna_Program Bygganvisningar, Öppna program].

= Tomcat i test/produktion (webapp) = 

== Test ==
Tomcat är i test/utv-miljön installerat som en windows service (Apache Tomcat Tomcat55).

För att avinstallera:

`> cd C:\webbisar\apache-tomcat-5.5.27\bin`
`> service.bat remove Tomcat55`

För att installera

`> cd C:\webbisar\apache-tomcat-5.5.27\bin`
`> service.bat install Tomcat55`

Man kan editera service.bat skriptet för att t ex öka minnet för Tomcat.

== Produktion ==
Tomcat är i produktionsmiljön installerad som en windows service (Apache Tomcat 6).

För att t.ex. öka minnet för Tomcat får man gå in i programmenyn / Apache Tomcat 6.0 / Configure Tomcat

= WebSphere/Liferay i test/produktion (portlets) = 

För närvarande används WebSphere för test och produktion när det gäller portlets. Tanken är att migrering skall ske till Liferay inom kort, vilket även förberetts för i projektet.

= Subversion = 
Se [http://code.google.com/p/oppna-program-webbisar/source/checkout Source] för information om hur du checkar ut källkoden. 

= CI Server (Hudson) = 
Detta projekt byggs på VGRs interna Hudson-server. Denna är bara tillgänglig internt på VGR.